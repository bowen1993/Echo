{"version":3,"sources":["services/userAction.js"],"names":["User","isPhoneExists","phoneNum","userDao","user","findOne","isUserExists","resolve","userId","console","log","id","updateUsername","newUsername","session","getSession","getDao","isSuccessful","updatedInfo","username","updateUserInfo","createNewUser","email","choose","newUser","create","update","$set","module","exports"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,OAAO,iBAAMA,IAAnB;;AAEA,eAAeC,aAAf,CAA6BC,QAA7B,EAAuCC,OAAvC,EAA+C;AAC3C,QAAIC,OAAO,MAAMD,QAAQE,OAAR,CAAgB;AAC7BH,kBAAUA;AADmB,KAAhB,CAAjB;AAGA,QAAII,eAAgBF,QAAQ,IAA5B;;AAEA,WAAO,sBAAY,mBAAW;AAC1BG,gBAAQD,YAAR;AACH,KAFM,CAAP;AAGH;;AAED,eAAeA,YAAf,CAA4BE,MAA5B,EAAoCL,OAApC,EAA4C;AACxCM,YAAQC,GAAR,CAAY,SAAZ;AACA,QAAIN,OAAO,MAAMD,QAAQE,OAAR,CAAgB;AAC7BM,YAAIH;AADyB,KAAhB,CAAjB;AAGAC,YAAQC,GAAR,CAAY,cAAZ;AACA,QAAIJ,eAAgBF,QAAQ,IAA5B;;AAEA,WAAO,sBAAY,mBAAW;AAC1BG,gBAAQD,YAAR;AACH,KAFM,CAAP;AAGH;;AAED,eAAeM,cAAf,CAA8BJ,MAA9B,EAAsCK,WAAtC,EAAkD;AAC9C;AACA,QAAMC,UAAU,MAAM,iBAAMC,UAAN,EAAtB;AACA,QAAMZ,UAAUW,QAAQE,MAAR,CAAehB,IAAf,CAAhB;;AAEAS,YAAQC,GAAR,CAAY,OAAZ;AACA,QAAIO,eAAe,MAAMX,aAAaE,MAAb,EAAqBL,OAArB,CAAzB;AACAM,YAAQC,GAAR,CAAYO,YAAZ;;AAEA,QAAKA,YAAL,EAAmB;AACf,YAAIC,cAAc;AACdC,sBAAUN;AADI,SAAlB;AAGA,cAAMO,eAAeZ,MAAf,EAAuBU,WAAvB,EAAoCf,OAApC,CAAN;AACH;;AAED,WAAO,sBAAY,mBAAW;AAC1BI,gBAAQU,YAAR;AACH,KAFM,CAAP;AAGH;;AAED,eAAeI,aAAf,CAA6BnB,QAA7B,EAAuCoB,KAAvC,EAA4D;AAAA,QAAdH,QAAc,uEAAL,IAAK;;AACxD;AACA,QAAML,UAAU,MAAM,iBAAMC,UAAN,EAAtB;AACA,QAAMZ,UAAUW,QAAQE,MAAR,CAAehB,IAAf,CAAhB;;AAEA,QAAIM,eAAe,MAAML,cAAcC,QAAd,EAAwBC,OAAxB,CAAzB;;AAEA,QAAK,CAACG,YAAN,EAAoB;AAChB,YAAIa,YAAY,IAAhB,EAAsB;AAClB;AACAA,uBAAW,kBAAQI,MAAR,EAAX;AACH;;AAED;AACA,YAAIC,UAAU,IAAIxB,IAAJ,CAAS;AACnBmB,sBAASA,QADU;AAEnBjB,sBAASA,QAFU;AAGnBoB,mBAAMA;AAHa,SAAT,CAAd;;AAMA;AACA,cAAMnB,QAAQsB,MAAR,CAAeD,OAAf,CAAN;AACH;;AAED,WAAO,sBAAY,mBAAW;AAC1BjB,gBAAQ,CAACD,YAAT;AACH,KAFM,CAAP;AAGH;;AAED,eAAec,cAAf,CAA8BZ,MAA9B,EAAsCU,WAAtC,EAAmDf,OAAnD,EAA2D;AACvD,UAAMA,QAAQuB,MAAR,CAAe;AACjBf,YAAGH;AADc,KAAf,EAEJ;AACEmB,cAAMT;AADR,KAFI,CAAN;AAKH;;AAEDU,OAAOC,OAAP,GAAiB;AACbR,gCADa;AAEbT;AAFa,CAAjB","file":"userAction.js","sourcesContent":["import model from '../models'\nimport Moniker from 'moniker'\n\nconst User = model.User\n\nasync function isPhoneExists(phoneNum, userDao){\n    let user = await userDao.findOne({\n        phoneNum: phoneNum\n    })\n    var isUserExists = (user != null)\n\n    return new Promise(resolve => {\n        resolve(isUserExists);\n    });\n}\n\nasync function isUserExists(userId, userDao){\n    console.log('finding')\n    let user = await userDao.findOne({\n        id: userId\n    })\n    console.log('found finish');\n    var isUserExists = (user != null)\n\n    return new Promise(resolve => {\n        resolve(isUserExists);\n    });\n}\n\nasync function updateUsername(userId, newUsername){\n    //get db session\n    const session = await model.getSession()\n    const userDao = session.getDao(User);\n\n    console.log('start')\n    let isSuccessful = await isUserExists(userId, userDao);\n    console.log(isSuccessful)\n    \n    if ( isSuccessful ){\n        let updatedInfo = {\n            username: newUsername\n        }\n        await updateUserInfo(userId, updatedInfo, userDao);\n    }\n    \n    return new Promise(resolve => {\n        resolve(isSuccessful);\n    });\n}\n\nasync function createNewUser(phoneNum, email, username=null){\n    //get db session\n    const session = await model.getSession()\n    const userDao = session.getDao(User);\n\n    var isUserExists = await isPhoneExists(phoneNum, userDao)\n    \n    if ( !isUserExists ){\n        if( username == null ){\n            // generate random username\n            username = Moniker.choose();\n        }\n\n        //create new user\n        let newUser = new User({\n            username:username,\n            phoneNum:phoneNum,\n            email:email\n        });\n\n        //save new user\n        await userDao.create(newUser);\n    }\n    \n    return new Promise(resolve => {\n        resolve(!isUserExists);\n    })\n}\n\nasync function updateUserInfo(userId, updatedInfo, userDao){\n    await userDao.update({\n        id:userId\n    },{\n        $set: updatedInfo\n    });\n}\n\nmodule.exports = {\n    createNewUser,\n    updateUsername\n}"]}
