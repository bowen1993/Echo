{"version":3,"sources":["services/userAction.js"],"names":["User","isPhoneExists","phoneNum","userDao","user","findOne","isUserExists","userId","id","resolve","updateUsername","newUsername","session","getSession","getDao","isSuccessful","updatedInfo","username","updateUserInfo","createNewUser","email","newUser","choose","createDate","Date","now","create","findUserByPhone","result","$extract","recursive","modifyDate","update","$set","module","exports"],"mappings":"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","file":"userAction.js","sourcesContent":["import Moniker from 'moniker';\nimport model from '../models';\n\nconst User = model.User;\n\nasync function isPhoneExists(phoneNum, userDao) {\n  const user = await userDao.findOne({\n    phoneNum,\n  });\n  const isUserExists = !!user;\n\n  return isUserExists;\n}\n\nasync function isUserExists(userId, userDao) {\n  const user = await userDao.findOne({\n    id: userId,\n  });\n  const isUserExists = !!user;\n\n  return new Promise((resolve) => {\n    resolve(isUserExists);\n  });\n}\n\nasync function updateUsername(userId, newUsername) {\n    // get db session\n  const session = await model.getSession();\n  const userDao = session.getDao(User);\n\n  const isSuccessful = await isUserExists(userId, userDao);\n\n  if (isSuccessful) {\n        // update user info\n    const updatedInfo = {\n      username: newUsername,\n    };\n    await updateUserInfo(userId, updatedInfo, userDao);\n  }\n\n  return new Promise((resolve) => {\n    resolve(isSuccessful);\n  });\n}\n\nasync function createNewUser(phoneNum, email, username = null) {\n    // get db session\n  const session = await model.getSession();\n  const userDao = session.getDao(User);\n\n  const isUserExists = await isPhoneExists(phoneNum, userDao);\n\n  let newUser = null;\n  if (!isUserExists) {\n    if (username == null) {\n            // generate random username\n      username = Moniker.choose();\n    }\n\n        // create new user\n    newUser = new User({\n      username,\n      phoneNum,\n      email,\n      createDate: Date.now(),\n    });\n    // save new user\n    await userDao.create(newUser);\n  } else {\n    newUser = await findUserByPhone(phoneNum);\n  }\n  // newUser = await Object.assign({}, newUser, { isUserExists });\n  // await console.log('1234', newUser, isUserExists);\n  return new Promise((resolve) => {\n    let result = null;\n    if (newUser) {\n      result = newUser.$extract({ recursive: true });\n    }\n    resolve(result);\n  });\n}\n\nasync function updateUserInfo(userId, updatedInfo, userDao) {\n  updatedInfo.modifyDate = Date.now();\n  await userDao.update({\n    id: userId,\n  }, {\n    $set: updatedInfo,\n  });\n}\n\nconst findUserByPhone = async (phoneNum) => {\n  const session = await model.getSession();\n  const userDao = session.getDao(User);\n  const user = await userDao.findOne({\n    phoneNum,\n  });\n  return new Promise((resolve) => {\n    resolve(user);\n  });\n};\n\nmodule.exports = {\n  createNewUser,\n  updateUsername,\n  findUserByPhone,\n};"]}