{"version":3,"sources":["routes/users.js"],"names":["Request","require","defaults","proxy","router","Router","csrfGuid","raw","accountKitApiVersion","appId","appSecret","meEndpointBaseUrl","tokenExchangeBaseUrl","get","req","res","num","query","id","updateUsername","then","result","send","csrf","post","body","state","appAccessToken","join","params","grant_type","code","access_token","tokenExchangeUrl","stringify","url","rejectUnauthorized","json","err","resp","respBody","writeHead","view","userAccessToken","expiresAt","expires_at","userId","meEndpointUrl","phone","phone_num","number","email","email_addr","address","createNewUser","currentUser","session","user","set","response","end","console","log","test","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["import express from 'express';\nimport Querystring from 'querystring';\nimport Guid from 'guid';\nimport cookie from 'cookie-parser';\nimport userAction from '../services/userAction';\n\nconst Request = require('request').defaults({ proxy: 'http://127.0.0.1:8087' });\n\nconst router = express.Router();\nconst csrfGuid = Guid.raw();\nconst accountKitApiVersion = 'v1.0';\nconst appId = '154086658467747';\nconst appSecret = '29dff4b859d858ef95c0fefca93db6f5';\nconst meEndpointBaseUrl = 'https://graph.accountkit.com/v1.1/me';\nconst tokenExchangeBaseUrl = 'https://graph.accountkit.com/v1.1/access_token';\n\n\n/* GET users listing. */\nrouter.get('/test', (req, res) => {\n  const num = req.query.num;\n  const id = req.query.id;\n  userAction.updateUsername(id, num).then((result) => {\n    res.send({ res: result });\n  });\n});\n\nrouter.get('/getCsrf', (req, res) => {\n  res.send({ csrf: csrfGuid });\n});\n\nrouter.post('/login_success', (req, res) => {\n  // CSRF check\n  if (req.body.state === csrfGuid) {\n    const appAccessToken = ['AA', appId, appSecret].join('|');\n    const params = {\n      grant_type: 'authorization_code',\n      code: req.body.code,\n      access_token: appAccessToken,\n    };\n\n    // exchange tokens\n    const tokenExchangeUrl = `${tokenExchangeBaseUrl}?${Querystring.stringify(params)}`;\n\n    Request.get({ url: tokenExchangeUrl, rejectUnauthorized: false, json: true }, (err, resp, respBody) => {\n      if (err) {\n        res.writeHead(400, { 'Content-Type': 'text/html' });\n        return;\n      }\n      const view = {\n        userAccessToken: respBody.access_token,\n        expiresAt: respBody.expires_at,\n        userId: respBody.id,\n      };\n\n      // get account details at /me endpoint\n      const meEndpointUrl = `${meEndpointBaseUrl}?access_token=${respBody.access_token}`;\n      Request.get({ url: meEndpointUrl, rejectUnauthorized: false, json: true }, (err, resp, respBody) => {\n        // send login_success.html\n        if (respBody.phone) {\n          view.phone_num = respBody.phone.number;\n        } else if (respBody.email) {\n          view.email_addr = respBody.email.address;\n        }\n\n        if (!view.phone_num) {\n          res.writeHead(400, { 'Content-Type': 'text/html' });\n          return;\n        }\n        // store & get user\n        userAction.createNewUser(view.phone_num, view.email_addr).then((currentUser) => {\n          // if new user created, isSuccess would be true, else false (user exists)\n          req.session.user = currentUser;\n          res.set({ 'Access-Control-Allow-Credentials': true });\n          res.send(currentUser);\n        });\n\n        // response.writeHead(200, { 'Content-Type': 'text/html' });\n        // response.end('233333 :( ');\n      });\n    });\n  } else {\n    // login failed\n    response.writeHead(400, { 'Content-Type': 'text/html' });\n    response.end('Something went wrong. :( ');\n  }\n});\n\nrouter.get('/logout', (req, res) => {\n  req.session.user = {};\n  res.writeHead(200, { 'Content-Type': 'text/html' });\n});\n\nrouter.get('/currentUser', (req, res) => {\n  console.log(req.session);\n  req.session.test = 'dsf';\n  return res.send(req.session.user || {});\n});\n\nmodule.exports = router;\n"]}