{"version":3,"sources":["routes/users.js"],"names":["Request","require","defaults","router","Router","csrf_guid","raw","account_kit_api_version","app_id","app_secret","me_endpoint_base_url","token_exchange_base_url","get","req","res","next","createNewUser","send","post","body","state","app_access_token","join","params","grant_type","code","access_token","token_exchange_url","stringify","url","rejectUnauthorized","json","err","resp","respBody","view","user_access_token","expires_at","user_id","id","me_endpoint_url","phone","phone_num","number","email","email_addr","address","response","writeHead","end","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAHA,IAAMA,UAAWC,QAAQ,SAAR,EAAmBC,QAAnB,CAA4B,EAAC,SAAS,uBAAV,EAA5B,CAAjB,CAAiF;;;AAKjF,IAAMC,SAAS,kBAAQC,MAAR,EAAf;AACA,IAAMC,YAAY,eAAKC,GAAL,EAAlB;AACA,IAAMC,0BAA0B,MAAhC;AACA,IAAMC,SAAS,iBAAf;AACA,IAAMC,aAAa,kCAAnB;AACA,IAAMC,uBAAuB,sCAA7B;AACA,IAAMC,0BAA0B,gDAAhC;;AAGA;AACAR,OAAOS,GAAP,CAAW,GAAX,EAAgB,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACvC,uBAAWC,aAAX,CAAyB,QAAzB,EAAmC,MAAnC;AACAF,MAAIG,IAAJ,CAAS;AACP,gBAAY;AADL,GAAT;AAGD,CALD;;AAOAd,OAAOe,IAAP,CAAY,gBAAZ,EAA8B,UAACL,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAEhD;AACA,MAAIF,IAAIM,IAAJ,CAASC,KAAT,KAAmBf,SAAvB,EAAkC;AAChC,QAAIgB,mBAAmB,CAAC,IAAD,EAAOb,MAAP,EAAeC,UAAf,EAA2Ba,IAA3B,CAAgC,GAAhC,CAAvB;AACA,QAAIC,SAAS;AACXC,kBAAY,oBADD;AAEXC,YAAMZ,IAAIM,IAAJ,CAASM,IAFJ;AAGXC,oBAAcL;AAHH,KAAb;;AAMA;AACA,QAAIM,qBAAqBhB,0BAA0B,GAA1B,GAAgC,sBAAYiB,SAAZ,CAAsBL,MAAtB,CAAzD;;AAEAvB,YAAQY,GAAR,CAAY,EAACiB,KAAKF,kBAAN,EAA2BG,oBAAoB,KAA/C,EAAsDC,MAAM,IAA5D,EAAZ,EAA+E,UAASC,GAAT,EAAcC,IAAd,EAAoBC,QAApB,EAA8B;AAC3G;AACA,UAAIC,OAAO;AACTC,2BAAmBF,SAASR,YADnB;AAETW,oBAAYH,SAASG,UAFZ;AAGTC,iBAASJ,SAASK;AAHT,OAAX;;AAMA;AACA,UAAIC,kBAAkB9B,uBAAuB,gBAAvB,GAA0CwB,SAASR,YAAzE;AACA1B,cAAQY,GAAR,CAAY,EAACiB,KAAKW,eAAN,EAAwBV,oBAAoB,KAA5C,EAAoDC,MAAM,IAA1D,EAAZ,EAA6E,UAASC,GAAT,EAAcC,IAAd,EAAoBC,QAApB,EAA8B;AACzG;AACA,YAAIA,SAASO,KAAb,EAAoB;AAClBN,eAAKO,SAAL,GAAiBR,SAASO,KAAT,CAAeE,MAAhC;AACD,SAFD,MAEO,IAAIT,SAASU,KAAb,EAAoB;AACzBT,eAAKU,UAAL,GAAkBX,SAASU,KAAT,CAAeE,OAAjC;AACD;;AAED;AACA,6BAAW9B,aAAX,CAAyBmB,KAAKO,SAA9B,EAAyCP,KAAKU,UAA9C;;AAEAE,iBAASC,SAAT,CAAmB,GAAnB,EAAwB,EAAC,gBAAgB,WAAjB,EAAxB;AACED,iBAASE,GAAT,CAAa,YAAb;AACH,OAbD;AAcD,KAxBD;AAyBD,GApCD,MAqCK;AACH;AACAF,aAASC,SAAT,CAAmB,GAAnB,EAAwB,EAAC,gBAAgB,WAAjB,EAAxB;AACAD,aAASE,GAAT,CAAa,2BAAb;AACD;AACF,CA7CD;;AA+CAC,OAAOC,OAAP,GAAiBhD,MAAjB","file":"users.js","sourcesContent":["import express from 'express';\nconst Request  = require('request').defaults({'proxy': 'http://127.0.0.1:8087'});;\nimport Querystring from 'querystring';\nimport Guid from 'guid';\nimport userAction from '../services/userAction'\n\nconst router = express.Router();\nconst csrf_guid = Guid.raw();\nconst account_kit_api_version = 'v1.0';\nconst app_id = '154086658467747';\nconst app_secret = '29dff4b859d858ef95c0fefca93db6f5';\nconst me_endpoint_base_url = 'https://graph.accountkit.com/v1.1/me';\nconst token_exchange_base_url = 'https://graph.accountkit.com/v1.1/access_token'; \n\n\n/* GET users listing. */\nrouter.get('/', function(req, res, next) {\n  userAction.createNewUser('123456', 'haha');\n  res.send({\n    'username': \"Bowen\"\n  })\n});\n\nrouter.post('/login_success', (req, res, next) => {\n\n  // CSRF check\n  if (req.body.state === csrf_guid) {\n    var app_access_token = ['AA', app_id, app_secret].join('|');\n    var params = {\n      grant_type: 'authorization_code',\n      code: req.body.code,\n      access_token: app_access_token\n    };\n    \n    // exchange tokens\n    var token_exchange_url = token_exchange_base_url + '?' + Querystring.stringify(params);\n\n    Request.get({url: token_exchange_url,  rejectUnauthorized: false, json: true}, function(err, resp, respBody) {\n      // console.log(err, resp, respBody)\n      var view = {\n        user_access_token: respBody.access_token,\n        expires_at: respBody.expires_at,\n        user_id: respBody.id,\t\n      };\n\n      // get account details at /me endpoint\n      var me_endpoint_url = me_endpoint_base_url + '?access_token=' + respBody.access_token;\n      Request.get({url: me_endpoint_url,  rejectUnauthorized: false,  json: true}, function(err, resp, respBody) {\n        // send login_success.html\n        if (respBody.phone) {\n          view.phone_num = respBody.phone.number;\n        } else if (respBody.email) {\n          view.email_addr = respBody.email.address;\n        }\n\n        // store & get user\n        userAction.createNewUser(view.phone_num, view.email_addr);\n\n        response.writeHead(200, {'Content-Type': 'text/html'});\n          response.end(\"233333 :( \");\n      });\n    });\n  } \n  else {\n    // login failed\n    response.writeHead(200, {'Content-Type': 'text/html'});\n    response.end(\"Something went wrong. :( \");\n  }\n})\n\nmodule.exports = router;\n"]}