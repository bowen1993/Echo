{"version":3,"sources":["routes/users.js"],"names":["Request","require","defaults","router","Router","csrf_guid","raw","account_kit_api_version","app_id","app_secret","me_endpoint_base_url","token_exchange_base_url","get","req","res","next","num","query","console","log","createNewUser","then","isSucess","send","csrf","post","response","body","state","app_access_token","join","params","grant_type","code","access_token","token_exchange_url","stringify","url","rejectUnauthorized","json","err","resp","respBody","writeHead","view","user_access_token","expires_at","user_id","id","me_endpoint_url","phone","phone_num","number","email","email_addr","address","end","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["import express from 'express';\nconst Request  = require('request').defaults({'proxy': 'http://127.0.0.1:8087'});;\nimport Querystring from 'querystring';\nimport Guid from 'guid';\nimport userAction from '../services/userAction'\n\nconst router = express.Router();\nconst csrf_guid = Guid.raw();\nconst account_kit_api_version = 'v1.0';\nconst app_id = '154086658467747';\nconst app_secret = '29dff4b859d858ef95c0fefca93db6f5';\nconst me_endpoint_base_url = 'https://graph.accountkit.com/v1.1/me';\nconst token_exchange_base_url = 'https://graph.accountkit.com/v1.1/access_token'; \n\n\n/* GET users listing. */\nrouter.get('/test', function(req, res, next) {\n  var num = req.query.num;\n  console.log(num)\n  userAction.createNewUser(num, 'haha').then((isSucess) => {\n    // if new user created, isSuccess would be true, else false (user exists)\n    res.send({\n      'username': isSucess\n    })\n  });\n});\n\nrouter.get('/getCsrf', (req, res, next) => {\n  res.send({ csrf: csrf_guid})\n})\n\nrouter.post('/login_success', (req, response, next) => {\n  console.log('login_success')\n  // CSRF check\n  if (req.body.state === csrf_guid) {\n    var app_access_token = ['AA', app_id, app_secret].join('|');\n    var params = {\n      grant_type: 'authorization_code',\n      code: req.body.code,\n      access_token: app_access_token\n    };\n    \n    // exchange tokens\n    var token_exchange_url = token_exchange_base_url + '?' + Querystring.stringify(params);\n\n    Request.get({url: token_exchange_url,  rejectUnauthorized: false, json: true}, function(err, resp, respBody) {\n      // console.log(err, resp, respBody)\n      if ( err ){\n        response.writeHead(400, {'Content-Type': 'text/html'});\n      }\n      var view = {\n        user_access_token: respBody.access_token,\n        expires_at: respBody.expires_at,\n        user_id: respBody.id,\t\n      };\n\n      // get account details at /me endpoint\n      var me_endpoint_url = me_endpoint_base_url + '?access_token=' + respBody.access_token;\n      Request.get({url: me_endpoint_url,  rejectUnauthorized: false,  json: true}, function(err, resp, respBody) {\n        // send login_success.html\n        if (respBody.phone) {\n          view.phone_num = respBody.phone.number;\n        } else if (respBody.email) {\n          view.email_addr = respBody.email.address;\n        }\n\n        // store & get user\n\n        response.writeHead(200, {'Content-Type': 'text/html'});\n          response.end(\"233333 :( \");\n      });\n    });\n  } \n  else {\n    // login failed\n    response.writeHead(400, {'Content-Type': 'text/html'});\n    response.end(\"Something went wrong. :( \");\n  }\n})\n\n\n\nmodule.exports = router;\n"]}